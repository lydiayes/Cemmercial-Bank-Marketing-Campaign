install.packages("tidyverse")
install.packages("leaps")
install.packages("olsrr")
install.packages("bestglm")
install.packages("ROCR")
install.packages("dplyr")
install.packages("ROSE")

install.packages("ggplot2")
install.packages("fastDummies")
install.packages("e1071")
install.packages("caret")
install.packages("rpart")
install.packages("randomForest")
install.packages("ada")


library(ggplot2)
library(tidyverse)
library(leaps) 
library(olsrr)
library(bestglm)
library(ROCR)
library(dplyr)
library(ROSE)
library(ggplot2)
library(fastDummies)
library(e1071)
library(caret)
library(rpart)
library(randomForest)
library(ada)



BankMarketingData_Actual <- read.csv("~/Marketing_Campaign.csv")

# Display the dimensions of this data set
dim(BankMarketingData_Actual)

# Display the column names of the dataset
names(BankMarketingData_Actual)

# Inspect the type and some characteristics of each variable or column.
str(BankMarketingData_Actual)

# Inspect NA values in the data set and Impute them -
anyNA(BankMarketingData_Actual)

# Define the clean Bank Marketing Data
BankMarketingData_Clean <- BankMarketingData_Actual

#Add target variable 'Subscribed' for the variable 'y'

BankMarketingData_Clean$Subscribed <- ifelse(BankMarketingData_Actual$y == 'yes', 1, 0)
BankMarketingData_Clean$Subscribed <- factor(BankMarketingData_Clean$Subscribed)

BankMarketingData_Clean$job <- factor(BankMarketingData_Clean$job)
BankMarketingData_Clean$marital <- factor(BankMarketingData_Clean$marital)
BankMarketingData_Clean$education <- factor(BankMarketingData_Clean$education)
BankMarketingData_Clean$default <- factor(BankMarketingData_Clean$default)
BankMarketingData_Clean$housing <- factor(BankMarketingData_Clean$housing)
BankMarketingData_Clean$loan <- factor(BankMarketingData_Clean$loan)
BankMarketingData_Clean$contact <- factor(BankMarketingData_Clean$contact)
BankMarketingData_Clean$month <- factor(BankMarketingData_Clean$month)
BankMarketingData_Clean$poutcome <- factor(BankMarketingData_Clean$poutcome)

View(BankMarketingData_Clean)
View(BankMarketingData_Actual)

str(BankMarketingData_Clean)

#Also, removing the y as we have transformed the value of y into Subscribed
BankMarketingData_Clean <- subset( BankMarketingData_Clean, select = -y )

BankMarketingData_Clean <- subset( BankMarketingData_Clean, select = -duration )

length(unique(BankMarketingData_Clean$day))

#Wrangling & Exploratory Data
summary(BankMarketingData_Clean$Subscribed)


sort(round(prop.table(table(BankMarketingData_Clean$job))*100, 2), decreasing = T)

sort(round(prop.table(table(BankMarketingData_Clean$education))*100, 2), decreasing = T)

sort(round(prop.table(table(BankMarketingData_Clean$rangeage))*100, 2), decreasing = T)

round(prop.table(table(BankMarketingData_Clean$marital, BankMarketingData_Clean$Subscribed))*100, 2)

#Initial run of the logistic regression, we found out that loan=unknown do not have any significance and 
#the summary is providing ‘NA’ for all the output parameters. So removing it
BankMarketingData_Clean <- BankMarketingData_Clean %>% dplyr::filter(BankMarketingData_Clean$loan != 'unknown')

#Exploratory Data Analysis
library(dplyr)
library(ggplot2)
ggplot(BankMarketingData_Actual,aes(job))+geom_bar(aes(fill=y))+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

# Table 1 Job and Subscribed and Term deposit
# Admin and Management are most clients with job description that subscribed a term deposit.
# Meanwhile, 
  
table(BankMarketingData_Actual$contact,BankMarketingData_Actual$y)
ggplot(BankMarketingData_Actual,aes(previous))+geom_bar(aes(fill=y))

# Table 2
  
ggplot(BankMarketingData_Actual,aes(job))+geom_bar(aes(fill=contact)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.9, hjust=1))
table(BankMarketingData_Actual$poutcome,BankMarketingData_Actual$y)

# Table 3

# (Need further adjust data for limit label for Y)
ggplot(BankMarketingData_Actual,aes(previous))+geom_bar(aes(fill=y))

#Previous number of contacts performed before this campaign and for this client has less affect on subscription of product compared to clients who has no previous number of contacts performed.

table(BankMarketingData_Actual$poutcome,BankMarketingData_Actual$y)

# Among the clients who subscribed product, outcome of previous contacted clients with nonexistent category has most subscriptions.
# Train - Test Split#
# split the data into training and validation sets(70- 30 split)

set.seed(123)
train = sample(1:nrow(BankMarketingData_Clean), nrow(BankMarketingData_Clean)/1.43) #Row indexes
test = (-train)#Row indexes for test set
BankMarketingDataTrain <- BankMarketingData_Clean[train, ]
BankMarketingDataTest <- BankMarketingData_Clean[test, ]


# Train - balancing by Oversampling technique#
table(BankMarketingDataTrain$Subscribed)

BankMarketingDataTrain <- ovun.sample(Subscribed ~ ., data = BankMarketingDataTrain, method = "over",N =42600 )$data
table(BankMarketingDataTrain$Subscribed)



# Model Selection, training and Predict#
#Summary of the train dataset
str(BankMarketingDataTrain)

m1 <- glm(formula = as.factor(Subscribed) ~ . , data = BankMarketingDataTrain, family = binomial)

summary(m1)


BankMarketingDataTrain <- ovun.sample(Subscribed ~ ., data = BankMarketingDataTrain, method = "over",N =42600 )$data
table(BankMarketingDataTrain$Subscribed)


#????????????????????????????????????????
Installed.package(fastDummies)
library(fastDummies)
dummy_data <- fastDummies::dummy_cols(BankMarketingData_Clean[,c(1:16,17)],remove_first_dummy = TRUE)
names(dummy_data)










library(e1071)
model_svm<-svm(Subscribed ~ .,data = BankMarketingDataTrain)
summary(model_svm)


library(caret)
pred1<-predict(model_svm,BankMarketingDataTest)
confusionMatrix(as.factor(BankMarketingDataTest$Subscribed),as.factor(pred1))

library(rpart)
model_dt<-rpart(Subscribed ~ .,data=BankMarketingDataTrain)
library(rpart.plot)
rpart.plot(model_dt)

pred<-predict(model_dt,BankMarketingDataTest,type = "class")
confusionMatrix(as.factor(BankMarketingDataTest$Subscribed),as.factor(pred))

table(BankMarketingDataTest$Subscribed)

# Accuracy is looking good with almost 84% and sensitivity is ~95% i.e True Positive Rate is also good.

# Using advanced models - Bagging

library(randomForest)

model_rf<-train(Subscribed ~ .,data=BankMarketingDataTrain,method="rf",ntree =20)

pred2<-predict(model_rf,BankMarketingDataTest)
confusionMatrix(as.factor(BankMarketingDataTest$Subscribed),as.factor(pred2))

library(ada)

model_ada<-ada(Subscribed ~ .,data=BankMarketingDataTrain,loss="exponential",type="discrete",iter=50 )
summary(model_ada)

pred_ada<-predict(model_ada,BankMarketingDataTest)
confusionMatrix(as.factor(BankMarketingDataTest$Subscribed),as.factor(pred_ada))

